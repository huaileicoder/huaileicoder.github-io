<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>huailei blog</title>
    <description>Trust The Process</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 17 Nov 2018 15:32:58 +0800</pubDate>
    <lastBuildDate>Sat, 17 Nov 2018 15:32:58 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>工厂模式</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;九月(live)–旦增&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;简单工厂&quot;&gt;简单工厂&lt;/h2&gt;

&lt;p&gt;假如你有一家4s店，这家4s店并不是只卖一种品牌的车。现在最简单的方式可能是这种：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;orderCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;audi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Audi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;qirui&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QiRui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bwm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bwm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;benz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Benz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;嗯，看起来还不错，但是如果现在4s店需要销售其他品牌的车就只能修改当前这个方法。现在有种办法是不是可以把生产汽车的代码抽出来放到一个factory中，factory来处理生产汽车的细节。代码像这样……&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleCarFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;audi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Audi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;qirui&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QiRui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bwm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bwm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;benz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Benz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虽然把生成汽车的代码抽了出来但是增加或者减少汽车的品牌仍然需要修改这段代码，但与之带来的好处是这个factory可以为多家4s店服务。当以后实现改变时，只要改变这个类就行了。&lt;/p&gt;

&lt;p&gt;重组后的4s店是这样的：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CarStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleCarFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;orderCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外可以利用静态方法定义一个简单的工厂，被称为&lt;code class=&quot;highlighter-rouge&quot;&gt;静态工厂&lt;/code&gt;。使用静态方法是因为不需要创建对象就可以使用，但是有相应的问题就是不能通过继承来改变创建方法的行为，这是为什么呢，通过继承来改变创建方法的行为在这里就是重写静态方法，&lt;code class=&quot;highlighter-rouge&quot;&gt;重写指的是根据运行时对象的类型来决定调用哪个方法，而静态方法在编译期就已经与编译出来的类型绑定了&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;工厂方法&quot;&gt;工厂方法&lt;/h2&gt;

&lt;p&gt;为了解决上面简单工厂增加或者减少汽车类型需要修改相关代码现在可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;工厂方法模式&lt;/code&gt;来解决这个问题，我们先来看一下工厂方法的定义：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;工厂方法模式 ：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在简单工厂里面现在增加生产江淮的汽车，就需要在createCar(String type)方法里面增加这种类型。现在可以这样解决，定义一个抽象工厂CarFacotry，定义一个抽象的工厂方法，让子类实现此方法制造产品。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以去实现具体的汽车工厂，比如BMWFactory、BenzFactory等，这样每一个类型的工厂只要只要这个类型的汽车就可以了。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BMWFactory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CarFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bwm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bwm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BenzFactory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CarFacatory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;benz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Benz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在使用中直接把具体的汽车工厂通过CarStore的构造方法传进去就行了，然后orderCar的时候会去执行这个指定工厂的createCar()方法。&lt;/p&gt;

&lt;p&gt;下面是工厂方法简单的类图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-designPattern/post-designPattern-factoryPattern-1.png&quot; alt=&quot;factory method&quot; /&gt;&lt;/p&gt;

&lt;p&gt;工厂方法模式能够封装具体类型的实例化。抽象的Creator提供了一个创建对象的方法的接口，称为&lt;code class=&quot;highlighter-rouge&quot;&gt;“工厂方法”&lt;/code&gt;。在抽象的Creator中，任何其他实现的方法，都可能使用到这个工厂方法所制造出来的产品，但只有子类真正实现这个工厂方法创建产品。&lt;/p&gt;

&lt;p&gt;这里每一个具体的工厂的实现都像是SimpleFactory，区别在于这里的具体工厂是扩展自一个类，这个类有一个抽象的方法createCar()。由每个工厂自己来负责createCar()中的行为。另外简单工厂不具有工厂方法的弹性，简单工厂不能变更正在创建的产品，简单工厂添加删除类型需要修改那段代码，而工厂方法不需要。&lt;/p&gt;

&lt;h2 id=&quot;抽象工厂&quot;&gt;抽象工厂&lt;/h2&gt;

&lt;p&gt;在认识抽象工厂模式之前，我们先来认识一下&lt;code class=&quot;highlighter-rouge&quot;&gt;依赖倒置原则&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;依赖倒置原则(Dependency Inversion Principle)：要依赖抽象，不要依赖具体类
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个原则说明了：不能让高层组件依赖底层组件，不管高层或底层组件，“两者”都应该依赖于抽象。所谓“高层”组件，是由其他底层组件定义其行为的类。比如：在这里CarStore是个高层组件，因为它的行为是由Car定义的。&lt;/p&gt;

&lt;p&gt;比如像下面这样就是依赖具体类：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DependentCarStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;orderCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;audi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Audi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;qirui&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QiRui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bwm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bwm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;benz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Benz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在DependentCarStore中，DependentCarStore依赖于具体的汽车类，这是违背依赖倒置原则的。如果要符合依赖倒置原则，我们需要做的转变就是定义一个Car接口，由CarStore来依赖于Car，然后具体的汽车类来实现这个接口，所以说也是依赖于Car。&lt;/p&gt;

&lt;p&gt;避免在OO设计中违反依赖倒置原则&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;变量不可以持有具体类的引用&lt;/li&gt;
  &lt;li&gt;不要让类派生自具体类&lt;/li&gt;
  &lt;li&gt;不要覆盖基类中已实现的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们来认识一下抽象工厂模式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;抽象工厂模式 ： 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;抽象工厂模式是为产品家族提供接口。家族在这里就是发动机、喇叭、车轮等。通过抽象工厂提供的接口，可以创建产品的家族，利用这个接口书写代码，我们的代码将从实际工厂解耦，以便实现不同的工厂，制造出各种不同的产品。奔驰、宝马、江淮汽车的各个零件都是不一样的，在这里我们可以分别的生产不同的零件。&lt;/p&gt;

&lt;p&gt;首先我们先来建一个零件工厂：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarComponentsFatory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tire&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Horn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createHorn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来先来实现奔驰零件工厂，Benz用到的零件都是比较好的：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BenzCarComponentsFatory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HighEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tire&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HighTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Horn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createHorn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HighHorn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而江淮的车使用到的零件就比Benz差了，所以使用低档次的零件：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JHCarComponentsFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LowEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tire&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LowTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Horn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createHorn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LowHorn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;零件工厂已经准备好了，我们重新开始生产汽车，先从抽象的Car类开始：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Tire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Horn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;horn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在已经有了一个抽象的汽车类了，现在开始创建奔驰和江淮的汽车了。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BenzCar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CarComponentsFatory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carComponentsFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BenzCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CarComponentsFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carComponentsFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carComponentsFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carComponentsFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carComponentsFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carComponentsFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;horn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carComponentsFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createHorn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样创建江淮汽车也是如此，并且可以在这基础上有自己的修改。&lt;/p&gt;

&lt;p&gt;好了，现在我们去4s店购买汽车：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BenzCarStore&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CarStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CarComponentsFatory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentsFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BenzCarComponentsFatory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       
        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BenzCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentsFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;；&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Benz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这里我们创建BenzCar然后让它与Benz零件工厂绑定在一起，之后就可以调用execute()方法让工厂去生产零件。可以看到在这里我们甚至可以使用JH零件工厂来给Benz生产零件，但是呢这肯定会被投诉的。&lt;/p&gt;

&lt;p&gt;现在你可以对比一下工厂方法和抽象工厂，其实抽象工厂的每个方法实际上都是使用工厂方法来实现的。比如createEngine()等，每个方法都被声明为抽象，而子类的方法覆盖这些对象来创建某些对象。&lt;/p&gt;

&lt;p&gt;但是，工厂方法创建对象用的方法是继承，利用工厂方法创建对象需要扩展一个类，而抽象工厂是通过对象的组合。工厂方法模式和抽象方法模式比较容易搞混，在使用中工厂方法是用来创建一个产品。而抽象工厂是可以被用来创建整个产品家族的。如果使用抽象工厂创建产品，加入新产品就必须改变其接口了。&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;三种工厂模式各有各的用处，简单工厂用于简单的创建一个产品，工厂模式在简单工厂的基础上可以增加产品类型，抽象工厂用于创建整个产品家族的，可以根据具体的情况选择使用对应的工厂模式。这是我目前理解的工厂模式，会有一些理解不准确不到位的地方，希望大家能多多指教。&lt;/p&gt;

</description>
        <pubDate>Sat, 10 Nov 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/11/10/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/10/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F</guid>
        
        <category>-designPattern</category>
        
        
      </item>
    
      <item>
        <title>Linux命令：top</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;温暖(live) –tiger&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;常用参数&quot;&gt;常用参数&lt;/h2&gt;
&lt;p&gt;Linux中&lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;命令用于&lt;code class=&quot;highlighter-rouge&quot;&gt;实时显示process的动态&lt;/code&gt;。&lt;br /&gt;
top命令有一些常用的参数：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;-d&lt;/strong&gt;: 改变显示的更新速度，或是在交谈式指令列按&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-q&lt;/strong&gt;: 没有任何延时的显示速度，如果使用是以&lt;code class=&quot;highlighter-rouge&quot;&gt;superuser&lt;/code&gt;的权限执行，则top以最高的优先序执行。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-c&lt;/strong&gt;: 显示完成的&lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-n&lt;/strong&gt;: 更新的次数，完成之后将会退出top。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-p 139&lt;/strong&gt;: 显示进程Id为139的进程信息，CPU，内存占用率等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;输出信息介绍&quot;&gt;输出信息介绍&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-linux/post-top-1.png&quot; alt=&quot;top命令输出信息&quot; /&gt;&lt;br /&gt;
我们从图片中可以看到这些信息，首先第一行，当前时间，系统运行时间，当前登录用户，最后一项是系统负载，三个数值分别是1分钟，5分钟，15分钟到现在的平均值。第二行，任务的总数，zombie是僵尸进程数。第三行，&lt;code class=&quot;highlighter-rouge&quot;&gt;0.6%us&lt;/code&gt;: 用户空间占用CPU百分比，&lt;code class=&quot;highlighter-rouge&quot;&gt;0.3%sy&lt;/code&gt;: 内核空间占用CPU百分比，&lt;code class=&quot;highlighter-rouge&quot;&gt;0.1%ni&lt;/code&gt;: 用户进程空间内改变过优先级的进程占用CPU百分比，&lt;code class=&quot;highlighter-rouge&quot;&gt;98.9%id&lt;/code&gt;: 空闲CPU百分比，&lt;code class=&quot;highlighter-rouge&quot;&gt;0.0%wa&lt;/code&gt;: 等待输入输出的CPU时间百分比，&lt;code class=&quot;highlighter-rouge&quot;&gt;0.0%hi&lt;/code&gt;: Hardware IRQ，&lt;code class=&quot;highlighter-rouge&quot;&gt;0.0%si&lt;/code&gt;: Software IRQ。另外，IRQ: IRQ全称为Interrupt Request，即是“中断请求”的意思。st(Steal Time): stole time 的缩写，该项指标只对虚拟机有效，表示分配给当前虚拟机的CPU 时间之中，被同一台物理机上的其他虚拟机偷走的时间百分比。&lt;br /&gt;
后面两行根据名字就能看出相应的意思，这里介绍一下&lt;code class=&quot;highlighter-rouge&quot;&gt;buffer&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;cache&lt;/code&gt;的区别:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;可用内存 = 系统&lt;code class=&quot;highlighter-rouge&quot;&gt;free memory + buffers + cached&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;buffers&lt;/code&gt;是指用来给块设备做的缓冲大小，他只记录文件系统的&lt;code class=&quot;highlighter-rouge&quot;&gt;metadata&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;tracking in-flight pages&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cached&lt;/code&gt;是用来给文件做缓冲&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那就是说：&lt;code class=&quot;highlighter-rouge&quot;&gt;buffers&lt;/code&gt;是用来存储，目录里面有什么内容，权限等等。而&lt;code class=&quot;highlighter-rouge&quot;&gt;cached&lt;/code&gt;直接用来存储我们打开的文件。&lt;br /&gt;
&lt;img src=&quot;/img/in-post/post-linux/post-top-2.png&quot; alt=&quot;top命令输出信息&quot; /&gt;&lt;br /&gt;
这些字段的意思我们可以从下面两张图中了解：
&lt;img src=&quot;/img/in-post/post-linux/post-top-3.png&quot; alt=&quot;top命令输出信息&quot; /&gt;
&lt;img src=&quot;/img/in-post/post-linux/post-top-4.png&quot; alt=&quot;top命令输出信息&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;f &lt;/code&gt;键可以选择显示的内容。按&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;键之后会显示列的列表，按&lt;code class=&quot;highlighter-rouge&quot;&gt;a-z&lt;/code&gt;即可显示或隐藏对应的列，最后按回车键确定。&lt;/li&gt;
  &lt;li&gt;按&lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;键可以改变列的显示顺序。按小写的&lt;code class=&quot;highlighter-rouge&quot;&gt;a-z&lt;/code&gt;可以将相应的列向右移动，而大写的&lt;code class=&quot;highlighter-rouge&quot;&gt;A-Z&lt;/code&gt;可以将相应的列向左移动，最后按回车键确定。&lt;/li&gt;
  &lt;li&gt;按大写的&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;键，然后按&lt;code class=&quot;highlighter-rouge&quot;&gt;a-z&lt;/code&gt;可以将进程按照相应的列进行排序。而大写的&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;键可以将当前的排序倒转。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;常用交互命令&quot;&gt;常用交互命令&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ctrl+L&lt;/strong&gt;: 擦除并且重写屏幕。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;h&lt;/strong&gt;或者&lt;strong&gt;?&lt;/strong&gt;: 显示帮助画面，给出一些简短的命令总结说明。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;k&lt;/strong&gt;： 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;15信号&lt;/code&gt;；如果不能正常结束那就使用&lt;code class=&quot;highlighter-rouge&quot;&gt;信号9&lt;/code&gt;强制结束该进程。默认值是&lt;code class=&quot;highlighter-rouge&quot;&gt;信号15&lt;/code&gt;。在安全模式中此命令被屏蔽。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;i&lt;/strong&gt;： 忽略闲置和僵死进程。这是一个开关式命令。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;q&lt;/strong&gt;： 退出程序。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;r&lt;/strong&gt;： 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是&lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;： 切换到累计模式。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;： 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;。如果有小数，就换算成&lt;code class=&quot;highlighter-rouge&quot;&gt;ms&lt;/code&gt;。输入&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;值则系统将不断刷新，默认值是&lt;code class=&quot;highlighter-rouge&quot;&gt;5s&lt;/code&gt;。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;f&lt;/strong&gt;或者&lt;strong&gt;F&lt;/strong&gt;： 从当前显示中添加或者删除项目。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;o&lt;/strong&gt;或者&lt;strong&gt;O&lt;/strong&gt;： 改变显示项目的顺序。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;l&lt;/strong&gt;： 切换显示&lt;code class=&quot;highlighter-rouge&quot;&gt;平均负载&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;启动时间信息&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;m&lt;/strong&gt;： 切换显示&lt;code class=&quot;highlighter-rouge&quot;&gt;内存&lt;/code&gt;信息。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;t&lt;/strong&gt;： 切换显示&lt;code class=&quot;highlighter-rouge&quot;&gt;进程&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt;状态信息。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;c&lt;/strong&gt;： 切换显示&lt;code class=&quot;highlighter-rouge&quot;&gt;命令名称&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;完整命令行&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;： 根据驻留内存大小进行排序。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;： 根据CPU使用百分比大小进行排序。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;： 根据时间/累计时间进行排序。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;W&lt;/strong&gt;： 将当前设置写入&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.toprc&lt;/code&gt;文件中。这是写top配置文件的推荐方法。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 15 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/09/15/Linux%E5%91%BD%E4%BB%A4-top</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/15/Linux%E5%91%BD%E4%BB%A4-top</guid>
        
        <category>-Linux</category>
        
        
      </item>
    
      <item>
        <title>使用jekyll+github pages 搭建个人博客</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;But I Still Love You&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;搭建原因&quot;&gt;搭建原因&lt;/h2&gt;
&lt;p&gt;作为一个萌新，一直想有一个自己的博客，前一段时间自己试着使用&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll+github pages&lt;/code&gt; 来搭建自己的博客，其中有遇到很多的坑，比如搭建jekyll，以及使用jekyll theme的时候，慢慢的自己也搞懂这是个怎么回事，现在也写下这篇文章来记录一下，希望能对有些人有一点点帮助。&lt;/p&gt;

&lt;h2 id=&quot;搭建环境&quot;&gt;搭建环境&lt;/h2&gt;
&lt;p&gt;搭建博客需要jekyll以及GitHub，其中GitHub提供一个&lt;code class=&quot;highlighter-rouge&quot;&gt;pages&lt;/code&gt;功能，允许用户自定义项目首页，用来替代默认的源码列表&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;github Pages可以被认为是用户编写的、托管在github上的静态网页&lt;/li&gt;
  &lt;li&gt;Jekyll是一个静态站点生成器，它会根据网页源码生成静态文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;jekyll官网是这样介绍的&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Jekyll 是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过一个转换器（如 Markdown）和我们的 Liquid 渲染器转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll 也可以运行在 GitHub Page 上，也就是说，你可以使用 GitHub 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;开始搭建&quot;&gt;开始搭建&lt;/h2&gt;
&lt;h3 id=&quot;github-pages&quot;&gt;GitHub Pages&lt;/h3&gt;
&lt;p&gt;首先肯定要使用到GitHub，所以有一个自己的GitHub账号就不要再说了。当有了自己的GitHub账号之后需要创建一个新的仓库，并命名为username.github.io，比如我的username是 
&lt;code class=&quot;highlighter-rouge&quot;&gt;huaileicoder&lt;/code&gt;，那新建的仓库就是&lt;code class=&quot;highlighter-rouge&quot;&gt;huaileicoder.github.io&lt;/code&gt;。  &lt;br /&gt;
&lt;img src=&quot;/img/github-create new repository.png&quot; alt=&quot;新建一个仓库&quot; /&gt;&lt;br /&gt;
创建好之后进入仓库中选择setting，找到&lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub Pages&lt;/code&gt;，然后将你的site发布到&lt;code class=&quot;highlighter-rouge&quot;&gt;https://username.github.io/&lt;/code&gt;。&lt;br /&gt;
&lt;img src=&quot;/img/github-pages.png&quot; alt=&quot;github-pages&quot; /&gt;
我们去访问&lt;code class=&quot;highlighter-rouge&quot;&gt;https://username.github.io/&lt;/code&gt;，会发现只有一个简单的页面。&lt;/p&gt;

&lt;h3 id=&quot;安装jekyll&quot;&gt;安装jekyll&lt;/h3&gt;
&lt;p&gt;安装jekyll其实非常简单，但是你得做好一些准备工作，根据jekyll官网上介绍需要：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;RubyGems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以需要前往&lt;a href=&quot;https://rubyinstaller.org/downloads/&quot;&gt;https://rubyinstaller.org/downloads/&lt;/a&gt;下载&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;DEVELOPMENT KIT &lt;/code&gt;，DEVELOPMENT KIT有不同的版本，可以根据你的系统选择相应的工具。&lt;br /&gt;
安装ruby的时候，根据的你的选择放到相应的盘中，并且勾选&lt;code class=&quot;highlighter-rouge&quot;&gt;Add Ruby executables to your PATH&lt;/code&gt;。&lt;br /&gt;
安装好ruby之后可以使用指令&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt;查看ruby是否安装完成&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\Administrator&amp;gt;ruby -v
ruby 2.5.1p57 (2018-03-29 revision 63029) [x64-mingw32]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;安装dev kit 的时候一般把安装目录改为RubyDevKit，安装好dev-kit之后，使用终端(就是Windows下使用cmd启动的那个小黑窗)进入RubyDevKit目录，然后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby dk.rb init&lt;/code&gt;，然后使用文本编辑器打开RubyDevKit目录中的&lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt;。在文件的最后加上&lt;code class=&quot;highlighter-rouge&quot;&gt;- D:/Ruby25-x64&lt;/code&gt;，这是自己的Ruby安装目录，然后在刚才的终端下执行&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby dk.rb install&lt;/code&gt;。&lt;br /&gt;
接着在终端中输入&lt;code class=&quot;highlighter-rouge&quot;&gt;gem -v&lt;/code&gt;，可以看到相应的gem版本。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem -v
2.7.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;安装jekyll，因为jekyll很多安装包是由&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt;来安装的，并且如果没有的话启动jekyll会报错的，所以需要接着执行&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundle&lt;/code&gt;，也可以直接这样&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll bundle&lt;/code&gt;来安装。安装好之后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new dir&lt;/code&gt;，然后在终端中&lt;code class=&quot;highlighter-rouge&quot;&gt;cd dir&lt;/code&gt;接着执行&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;来安装jekyll的依赖包，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update&lt;/code&gt;来进行依赖包的更新。所有准备工作都做好之后，那就直接执行&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;，会有一些版本不匹配的问题，可以看到终端上会有提示信息让你使用&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;来启动jekyll，正常启动之后访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:4000&lt;/code&gt;来进入。这时候我们只能看到一个简单地页面，所以一般我们都会使用到别人已经做好的模板，当然你能力足够的话完全可以自己来写。&lt;/p&gt;

&lt;h2 id=&quot;jekyll-theme&quot;&gt;jekyll theme&lt;/h2&gt;
&lt;p&gt;使用jekyll原始的页面是非常简陋的，所以我们可以使用别人写好的jekyll theme来搭建一个”面相姣好”的博客页面。&lt;a href=&quot;http://jekyllthemes.org&quot;&gt;这里&lt;/a&gt;有许多模板，你可以挑一款自己喜欢的。我使用的是&lt;a href=&quot;http://huangxuan.me/&quot;&gt;Hux&lt;/a&gt;修改之后的模板，在&lt;a href=&quot;https://github.com/huaileicoder/huxpro.github.io&quot;&gt;这里&lt;/a&gt;可以看到你如何修改文件变为你自己的博客，这里只是一个模板，如果你对博客要求的东西不是太多的我想这已经够用了。其中配置&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;更加详细的信息可以从&lt;a href=&quot;http://jekyllcn.com/&quot;&gt;jekyll官网&lt;/a&gt;获取。不过需要提醒一句的是文章中涉及到的评论系统&lt;code class=&quot;highlighter-rouge&quot;&gt;duoshuo&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;disqus&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;duoshuo&lt;/code&gt;已不能使用，&lt;code class=&quot;highlighter-rouge&quot;&gt;disqus&lt;/code&gt;很早就被墙了，所以都不能使用，在这里推荐大家使用&lt;code class=&quot;highlighter-rouge&quot;&gt;gitment&lt;/code&gt;，从网上可以搜到很多的教程来使用&lt;code class=&quot;highlighter-rouge&quot;&gt;gitment&lt;/code&gt;搭建评论系统。&lt;br /&gt;
另外在对第一次使用模板的时候可以会因为一些配置文件版本问题不匹配，所以需要自己根据实际情况去解决，不过遇到这些文件不匹配的时候可以试着自己使用&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install xxxxx&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install xxxxxx&lt;/code&gt;去安装对应的文件，如果实在安装不了，可以试着从其他地方找到对应版本号的文件粘贴进去，最后实在不行那就安装一个匹配的jekyll，我想这是遇到自己觉得解决不了的问题的时候最简单的方法。&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;当第一次使用&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll+github pages&lt;/code&gt;来搭建博客的时候，不知道自己要做什么，就在Google查相关的信息，这样的信息还是不少的，所以在这里感谢那些在网上贡献自己知识的人。我不知道自己多少次安了卸，卸了安，安装的过程中自己根据终端的错误信息，以及网上的教程，就知道什么样的错误该怎么解决，所以呢，如果对这方面不是有些了解的话，你一次就安装成功之后可以卸载，然后自己再按着这样的方式再去安装，安装的时候可以更换ruby的版本，我想你会有不同的体验的。安装的教程也可以参考 &lt;a href=&quot;http://jekyllcn.com/&quot;&gt;jekyll官网&lt;/a&gt;，里面有更加详细的信息。&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/09/01/%E4%BD%BF%E7%94%A8jekyll+github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/01/%E4%BD%BF%E7%94%A8jekyll+github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2</guid>
        
        <category>-jekyll</category>
        
        <category>-githubpages</category>
        
        
      </item>
    
  </channel>
</rss>
