## 通用的线程周期
通用的线程周期基本上可以用五个状态来表示。这个五个状态分别是：初始状态、可运行状态、运行状态、休眠状态以及终止状态。
1、**初始状态**：指的是线程已经被创建，但还不允许分配CPU执行。这个创建是指在编程语言层面被创建，在操作系统层面，线程还没有被创建。

2、**就绪状态**：指的是可以允许分配CPU执行。在这种状态下，真正的操作系统线程已经被创建了。

3、**运行状态**：当有空闲的CPU时，操作系统会将其分配给一个就绪状态的线程，被分配到CPU的线程状态就转换为运行状态。

4、**休眠状态**：运行状态的线程如果调用一个阻塞的API（例如以阻塞方式读文件）或者等待某个事件（例如条件变量），那么线程的状态就转换为休眠状态，同时释放CPU使用权，休眠状态的线程永远没有机会获得CPU使用权。当等待的事件出现了，线程就会自动从休眠状态转换为就绪状态。

5、**终止状态**：线程执行完成或者出现异常就会进入终止状态，终止状态的线程不会切换到其他线程，进入终止状态就说明线程的生命周期结束了。

这五种状态在不同的编程语言中会有简化合并。比如Java中就把就绪状态和运行状态合并并称为运行状态。除此之外，这五种状态也有可能被细化，比如Java就细化了休眠状态。


## Java的线程周期
Java线程在运行的生命周期可能处于六种不同的状态，在给定的一个时刻，线程只能处于其中的一个状态。
1、**NEW**：初始状态，线程被构建，但是还没有调用start()方法。
2、**RUNNABLE**：运行状态，Java线程将操作系统中的就绪和运行两种状态笼统的称作为“运行中”。
3、**BLOCKED**：阻塞状态，表示线程阻塞于锁。
4、**WAITING**：等待状态，表示线程进入等待状态，进入该状态表示当前线程需要等待其他线程做出一些特定动作（通知或中断）。
5、**TIME_WAITING**：超时等待状态，该状态不同于WAITING，它是可以在指定的时间自行返回的。
6、**TERMINATED**：终止状态，表示当前线程已经执行完毕。

在操作系统层面，Java中BOLCKED、WAITING、TIME_WAITING三种状态是一中状态，即休眠状态。也就是说只要Java线程处于三种状态之一，那么这个线程永远没有CPU的使用权。

### 状态的转换
![Java线程状态转换图](img/Java线程状态图.jpg)

#### 1、从NEW到RUNNABLE状态
Java 刚创建出来的 Thread 对象就是 NEW 状态，而创建 Thread 对象主要有两种方法。一种是继承 Thread 对象，重写 run() 方法。
```java
// 自定义线程对象
class MyThread extends Thread {
  public void run() {
    // 线程需要执行的代码
    ......
  }
}
// 创建线程对象
MyThread myThread = new MyThread();

```
另一种是实现 Runnable 接口，重写 run() 方法，并将该实现类作为创建 Thread 对象的参数。
```java
// 实现 Runnable 接口
class Runner implements Runnable {
  @Override
  public void run() {
    // 线程需要执行的代码
    ......
  }
}
// 创建线程对象
Thread thread = new Thread(new Runner());

```
