---
layout:     post
title:      "代码整洁之道-总结"
subtitle:   " "
date:       2019-05-06
author:     "huailei"
header-img: "img/home-bg-o.jpg"
tags:
     -clean code
---
##  引言
学习整洁代码很难。它可不止于要求你掌握原则和模式。你得在这上面花功夫，你须自行实践，且体验自己的失败。你须观察他人的实践与失败。你须看看别人是怎样蹒跚学步，再转头研究他们的路数。你须看看别人是如何绞尽脑汁做出抉择，又是如何为错误决策付出代价。

如何学习？阅读代码——大量代码。而且你要去琢磨某段代码好在什么地方、坏在什么地方。
你得分析和理解那些代码，琢磨每次修改的来龙去脉。

花时间琢磨那些案例，亦步亦趋——站在作者的角度，迫使自己以作者的思维路径考虑问题，就能更深刻的理解这些原则、模式、实践和启示。

## 整洁代码
- >代码逻辑应当直接了当，叫缺陷难以隐藏；尽量减少依赖关系，使之便于维护；依据某种分层战略完善处理错误代码；性能调至最优，省的引诱别人做没规矩的优化，搞出一堆混乱来。整洁的代码只做一件事。

糟糕的代码想做太多事，它意图混乱、目的含混。整洁的代码力求集中。每个函数、每个类和每个模块都全神贯注于一事，完全不受四周细节的干扰和污染。

对于重复代码：如果同一段代码反复出现，就表示某种想法未在代码中得到良好的体现。我尽力去找出到底那是什么，然后再尽力更清晰的表达出来。

童子军军规：让营地比你来时更干净

### 有意义的命名
#### 名副其实
名副其实应该是什么样的，变量、方法和类的名称应该已经回复了所有的大问题。它该告诉你，`它为什么存在，它做什么事，应该怎么用`。如果名称需要注释来补充，那就不算是名副其实。
```java
int d; // 消逝的时间，以天记
```
名称d并没有表达出这个变量的意思。我们应该选择指明了计量对象和计量单位的名称；
```java
int elapseTimeInDays;
int daysSinceCreation;
int daysSinceModification;
int fileAgeInDays;
```
选择体现本意的名称能让人更容易理解和修改代码。能正确理解下面代码要做什么事情吗？
```java
public List<int[]> getThem() {
	List<int[]> list1 = new ArrayList<>();
	for (int[] x : theList) {
		if (x[0] == 4) {
			list1.add(x);
		}
	}
	return list1;
}
```
上面代码说明要做什么事？我们无法从代码中直接看出。问题不在于代码的简洁度，而是在于代码的**模糊度**：即上下文在代码中未被明确体现的程度。上述代码要求我们了解这几件事情:
- theList是什么类型的东西？
- theList零下标条目的意义是什么？
- 值4的意义是什么？
- 我该怎么使用返回的列表？

问题的答案没体现在代码中，可那就是它们该在的地方。

#### 避免误导
程序员必须避免留下掩藏代码本意的错误线索。应当避免使用与本意相悖的词。例如，aix和sco都不该用作变量名，因为它们都是UNIX平台的专有名称。因为如果其他地方使用的话会让大家第一时间联想到UNIX下变量的意思，而不是当前情景下的意思，影响他人理解。
在名称中不要List，Map，Set等容器类型名。例如，别用accountList来指称一组账号，如果包含账号的容器并非是一个List，就会引起错误的判断。即便容器就是个List，最好也别在名称中写出容器类型名。
提防使用不同之处较小的名称。你能一下就区分开XYZControllerForEfficientHandlingOfStrings和另一处的XYZControllerForEfficientStorageOfStrings吗？
以同样的方式拼写出同样的概念才是信息，拼写前后不一致就是误导。

#### 做有意义的区分
以数字系列命名（a1、a2，······aN）是依立命名的对立面。这样的名称纯属误导——完全没有提供正确的信息；没有提供导向作者意图的线索。
`废话是另一种没意义的区分`。假设你有一个Product类。如果还有一个ProductInfo或ProductData类，那它们的名称虽然不同，意思却无区别。Info和Data就像a、an、和the一样是意义含混的废话。
`废话都是冗余`。
要区分名称，就要以读者能鉴别出不同之处的方式来区分。如果缺少明确约定，变量moneyAmonut就与money没区别，accountData与account没区别。

#### 使用可搜索的名称
长名称长余短名称（这里的短名称是指单个字母或者简写的名称，长名称的长度应该是可以让别人理解的最短长度，不要一味的为了长而长，只要短名称足够清楚，就要比长名称好。别给名称添加不必要的语境，精确才是命名的要点）。`名称长短应与其作用域大小相对应`。

#### 避免使用编码
不要把类型或者作用域编进名称里面。
```
PhoneNumber phoneString; // 类型变化时，名称并不变化
```
也不必用 *m_* 前缀来标明成员变量。应当把类和函数做的足够小，消除对成员前缀的需要。

### 避免思维映射
- > 明确是王道


不应当让读者在脑中把你的名称翻译为他们熟知的名称。这种问题经常出现在选择是使用问题领域术语还是解决方案领域术语时。
类名和对象名应该是名词或名词短语，类名不应当是动词。命名类名的良好习惯是采用一个名词（Order）、前面有形容词修饰的名词（RushOrder）或动名词（有“-ing”后缀）修饰名词（例如，BillingAddress）。
方法名应该是动词或动词短语。属性访问器、修改器和断言应该根据其值命名，并依JavaBean标准加上get、set和is前缀。
重载构造器时，使用描述了参数的静态工厂方法名。例如：
```java
Complex fulcrumPoint = Complex.FromRealNumber(23.0);
通常好于
Complex fulcrumPoint = new Complex(23.0);
```
给每个抽象概念选一个词，并且一以贯之。
避免将同一单词用于不同目的。

## 方法
方法需要做的事情：

1、`短小`。方法的第一规则是要短小，第二条规则还要更短小。方法20行封顶最佳。
if语句、else语句、while语句等，其中的代码块应该只有一行。该行大抵应该是一个函数调用语句。这样不但能保持方法短小，而且，因为块内调用的方法拥有具有说明性的名称，从而增加了文档上的价值。这也意味着方法不应该大到足以容纳嵌套结构。所有，方法的缩进层级不该多于一层或者两层。

2、`方法应该只做一件事，做好这件事，只做这一件事`。如果方法只是做了该方法名下同一抽象层上的步骤，则函数还是只做了一件事。编写方法毕竟是为了把大一些的概念拆分为另一抽象层上的一系列步骤。要判断方法是否不止做了一件事，还有一个方法，就是看是否能再拆出一个方法，该方法不仅只是单纯的重新诠释其实现。

3、`每一个方法一个抽象层级`。方法中混杂不同抽象层级，往往让人迷惑。读者可能无法判断某个表达式是基础概念还是细节。更恶劣的是，就像是破损的窗户，一旦细节与基础概念混杂，更多的细节就会在方法中纠结起来。
有一个向下规则，我们想要让每个方法后面都跟着位与下一抽象层级的方法，这样一来，在查看方法列表时，就能循抽象层级向下阅读了。换一种说法：程序就像是一系列TO起头的段落，每一段都描述当前抽象层级，并引用位于下一抽象层级的后续TO起头段落。

4、`沃德原则：如果每个例程都让你感到深合己意，那就是整洁代码`。要遵循这一原则，泰半工作都在于为只做一件事的方法取个好名字。方法越短小、功能越集中，就越便于取名字。
别害怕长名称。长而具有描述性的名称，要比短而令人费解的名称好。长而具有描述性的名称，要比描述性的长注释好。
别害怕花时间取名字。你当尝试不同的名称，实测其阅读效果。
选择描述性的名称能理清你关于模块的设计思路，并帮你改进之。
命名方式要保持一致。使用与模块名一脉相承的短语、名词和动词给方法命名。

5、`方法参数`。最理想的参数数量是零，其次是一，再次是二，应尽量避免三。输出参数比输入参数还要难以理解，读方法时，我们惯于认为信息通过参数输入方法，通过返回值从方法中输出。我们不太期望信息通过参数输出，所以，输出参数往往让人苦思之后才恍然大悟。
如果方法看来需要两个、三个或三个以上参数，就说明其中一些参数应该封装为类了。从参数法创建对象，从而减少参数数量，看起来像是在作弊，但实则并非如此。当一组参数被共同传递，往往就是该有自己名称的某个概念的一部分。

6、`分隔指令与询问`。方法要么做什么事，要么回答什么事，但二者不可兼得。

7、`抽离try/catch代码块`。try/catch代码块丑陋不堪。它们搞乱了代码结构，把错误处理与正常流程混为一谈。最好把try和catch代码块的主体部分抽离出来，另外形成方法。

如何写出这样的方法？写代码和写别的东西很像。在写论文或文章时，你先想什么就写什么，然后打磨它。初稿也许粗陋无序，你就斟酌推敲，直至达到你心目中的样子。`大师级程序员把系统当做故事来讲，而不是当做程序来写`。

## 注释
- > 注释应该谈及代码没提到的东西。

什么也比不上放置良好的注释来得有用，什么也不会比乱七八糟的注释更有本事搞乱一个模块，什么也不会比陈旧、提供错误信息的注释更有破坏性。注释的恰当用法是弥补我们在用代码表达意图时遭遇的失败。

为什么极力贬低注释？因为注释会撒谎。也不是说总是如此或有意如此，但出现的实在太频繁。注释存在的时间越久，就离其所描述的代码越远，越来越变得全然错误。原因很简单，程序员不能坚持维护注释。代码在变动，在演化。从这里移到那里。彼此分离、重造又合到一处。很不幸，注释并不总是随之变动——不能总是跟着走。注释常常会与其所描述的代码分离开来，孑然飘零，越来越不准确。

程序员应当负责将注释保持在可维护、有关联、精确的高度。但更好的方式把力气用在写清楚代码上，只有代码能忠实的告诉你它做的事情，那是唯一真正准确的信息来源。所以，尽管有时也需要注释，我们也该多花心思尽量减少注释量。

`注释不能美化槽糕的代码`。写注释的常见动机之一是糟糕的代码的存在。带有少量注释的整洁而有表达力的代码，要比带有大量注释的零碎而复杂的代码像样的多。与其花时间编写解释你搞出的糟糕的代码的注释，不如花时间清洁那堆糟糕的代码。

### 好注释
有些注释是必须的，也是有利的。不过唯一真正好的注释是你想办法不去写的注释。来看一下什么样的注释是应该写的。
- `对意图的解释`。有时，注释不仅提供了有关实现的有用信息，而且还提供了某个决定后面的意图。
- `阐释`。有时，注释把某些晦涩难懂的参数或返回值的意义翻译为某种可读形式，也会是有用的。通常，更好的方法时尽量让参数或返回值自身就足够清楚；但如果参数或返回值的某个标准库的一部分，或是你不能修改的代码，帮助阐释其含义的代码就会有用。当然，这也会冒阐释性注释本身就不正确的风险。
- `警示`。有时，用于警告其他程序员会出现某种后果的注释也是有用的。
- `TODO注释`。有时，有理由用//TODO形式在源代码中放置要做的工作列表。它可能是要提醒删除某个不必要的特性，或者要求其他人注意某个问题，或者提示对依赖于某个计划事件的修改。另外，你不会愿意代码因为TODO的存在而变成一堆垃圾，所以要定期查看，删除不再需要的。
- `放大`。注释可以用来放大某种看来不合理之物的重要性。
- `公共API中的Javadoc`。没有什么比被良好描述的公共API更有用和令人满意的了。

### 坏注释
- `误导性注释`。如果注释不够准确还是没有的好。
- `循规式注释`。所谓每个方法都要有Javadoc或每个变量都要有注释的规矩全然是愚蠢可笑的。
- `废话注释`。不知道你看到下面这段注释是什么感受？
```java
/**
* Default constructor
*/
protected AnnualDateRule(){}
```
- `不明显的联系`。注释及其描述的代码之间的联系应该显而易见。如果你不嫌麻烦要写注释，至少让读者能看着注释和代码，并理解注释所谈何物。
- `方法头`。短方法不需要太多描述。为只做一件事的短方法选个好名字，通常要比写方法头注释要好。

