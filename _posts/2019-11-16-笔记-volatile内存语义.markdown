---
layout:     post
title:      "笔记-volatile内存语义"
subtitle:   " "
date:       2019-11-16
author:     "huailei"
header-img: "img/home-bg-o.jpg"
tags:
    -concurrency
---

### volatile的特性
理解volatile特性的一个好办法是把对volatile变量的单个读/写，看成是使用同一个锁对这些单个读/写做了同步。一个volatile变量的单个读/写操作，与一个普通变量的读/写操作都是使用同一个锁来同步，它们之间执行效果相同。

锁的happens-before规则保证释放锁和获取锁的两个线程之间的内存可见性，这意味着对一个volatile变量的读，总能看到任意线程对这个volatile变量最后的写入。

volatile变量自身具有下列特性：
- 可见性：对一个volatile变量的读，总能看到任意线程对这个volatile变量最后的写入。
- 原子性：对任意单个volatile变量的读/写具有原子性，但类似于volatile++这种复合操作 不具有原子性。

从内存语义来说，volatile的写-读与锁的释放-获取有相同的内存语义：volatile写和锁的释放有相同的内存语义；volatile读与锁的获取有相同的内存语义。

### volatile写-读的内存语义
volatile写的内存语义：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存。

以VolatileExample为例:
```Java
class VolatileExample {
  int x = 0;
  volatile boolean v = false;
  public void writer() {
    x = 1;
    v = true;
  }
  public void reader() {
    if (v) {
      System.out.println(x);
      ······
    }
  }
}
```
![共享变量的状态示意图](https://github.com/huaileicoder/huaileicoder.github.io/blob/master/img/%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E7%9A%84%E7%8A%B6%E6%80%81%E7%A4%BA%E6%84%8F%E5%9B%BE1.png?raw=true)

如上图所示，线程A在写flag变量之后，本地内存A中被线程A更新过的两个共享变量的值被刷新在主内存中。此时，本地内存A和主内存中的共享变量的值是一致的。

volatile读的内存语义：当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效。线程接下来将从主内存读取共享变量。

![共享变量的状态示意图](https://github.com/huaileicoder/huaileicoder.github.io/blob/master/img/%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E7%9A%84%E7%8A%B6%E6%80%81%E7%A4%BA%E6%84%8F%E5%9B%BE2.png?raw=true)

如上图所示，在读flag变量后，本地内存B包含的值已经被置为无效。此时，线程B必须从主内存中读取共享变量。线程B的读取操作将导致本地内存B与主内存中的共享变量的值变成一致。

如果把volatile写和volatile读两个步骤综合来看的话，在读线程B读一个volatile变量后，写线程A在写这个volatile变量之前所有可见的共享变量的值都会立即变得对读线程B可见。

volatile写和volatile读的内存语义总结：
- 线程A写一个volatile变量，实质上是线程A向接下来将要读这个volatile变量的某个线程发出了（其对共享变量所做修改的）消息。
- 线程B读一个volatile变量，实质上是线程B接收了之前某个线程发出的（在写这个volatile变量之前对共享变量所做修改的）消息
- 线程A写一个volatile变量，随后线程B读这个volatile变量，这个过程实质上是线程A通过主内存向线程B发送消息。

### volatile内存语义的实现
之前提到重排序分为编译器重排序和处理器重排序。为了实现volatile内存语义，JMM会分别限制这两种类型的重排序类型。下面是JMM针对编译器制定的volatile重排序规则。

<table>
    <tr>
        <th>是否能重排序</th>
        <th colspan="3">第二个操作</th>
    </tr>
    <tr>
        <th>第一个操作</th>
        <th>普通读/写</th>
        <th>volatile读</th>
        <th>volatile写</th>
    </tr>
    <tr>
        <td>普通读/写</td>
        <td></td>
        <td></td>
        <td>NO</td>
    </tr>
    <tr>
        <td>volatile读</td>
        <td>NO</td>
        <td>NO</td>
        <td>NO</td>
    </tr>
    <tr>
        <td>volatile写</td>
        <td></td>
        <td>NO</td>
        <td>NO</td>
    </tr>
</table>

上面表格意思是：
1. 当第一个操作是普通读/写时，如果第二个操作是volatile写时，则编译器不允许这种重排序。
2. 当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序。这个规则确保volatile读之后的操作不会被编译器重排序到volatile读之前。
3. 当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。这个规则确保volatile写之前的操作不会被编译器重排序到volatile写之后。
4. 当第一个操作是volatile写，第二个操作是volatile读时不允许重排序。

为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎不可能。为此，JMM采取保守策略。下面是基于保守策略的JMM内存屏障插入策略。

- 在每个volatile写操作的前面插入一个StoreStore屏障
- 在每个volatile写操作的后面插入一个StoreLoad屏障
- 在每个volatile读操作的后面插入一个LoadLoad屏障
- 在每个volatile读操作的后面插入一个LoadStore屏障

下面是保守策略下，volatile写插入内存屏障后生成的指令序列示意图

![volatile写指令序列示意图](https://github.com/huaileicoder/huaileicoder.github.io/blob/master/img/volatile%E5%86%99%E6%8C%87%E4%BB%A4%E5%BA%8F%E5%88%97%E7%A4%BA%E6%84%8F%E5%9B%BE.png?raw=true)

上图中的StoreStore屏障可以保证在volatile写之前，其前面的所有普通写操作已经对任意处理器可见了。这是因为StoreStore屏障将保障上面所有的普通写在volatile写之前刷新到主内存。

volatile写后面的StoreLoad屏障作用是避免volatile写与后面可能有的volatile读/写操作重排序。因为编译器常常无法准确判断在一个volatile写的后面是否需要插入一个StoreLoad屏障（比如，一个volatile写之后直接return），为了保证volatile的内存语义，JMM采取保守策略：在每个volatile写的后面或者在每个volatile读的前面插入一个StoreLoad屏障。

下面是保守策略下，volatile读插入内存屏障后生成的指令序列示意图

![volatile读指令序列示意图](https://github.com/huaileicoder/huaileicoder.github.io/blob/master/img/volatile%E8%AF%BB%E6%8C%87%E4%BB%A4%E5%BA%8F%E5%88%97%E7%A4%BA%E6%84%8F%E5%9B%BE.png?raw=true)

上图中的LoadLoad屏障用来禁止处理器把上面的volatile读与下面的普通读重排序。LoadStore屏障用来禁止处理器把上面的volatile读与下面的普通写重排序。

但是在实际执行中，只要不改变volatile写-读的内存语义，编译器可以根据具体情况省略不必要的屏障。并且由于不同的处理器有不同“松紧度”的处理器内存模型，内存屏障的插入还可以根据具体的处理器内存模型继续优化。