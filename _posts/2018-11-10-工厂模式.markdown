---
layout:     post
title:      "工厂模式"
subtitle:   "简单工厂、工厂方法与抽象工厂"
date:       2018-11-10
author:     "huailei"
header-img: "img/home-bg-o.jpg"
tags:
    -designPattern
---

> 九月(live)--旦增

## 简单工厂

假如你有一家4s店，这家4s店并不是只卖一种品牌的车。现在最简单的方式可能是这种：

```java
public Car orderCar(String type) {
    Car car = null;

    if (type.equals("audi")) {
        car = new Audi();
    }
    if (type.equals("qirui")) {
        car = new QiRui();
    }
    if (type.equals("bwm")) {
        car = new Bwm();
    }
    if (type.equals("benz")) {
        car = new Benz();
    }

    car.execute();
    return car;
}
```

嗯，看起来还不错，但是如果现在4s店需要销售其他品牌的车就只能修改当前这个方法。现在有种办法是不是可以把生产汽车的代码抽出来放到一个factory中，factory来处理生产汽车的细节。代码像这样......

```java
public class SimpleCarFactory {
    public Car createCar(String type) {
        Car car = null;
        if (type.equals("audi")) {
            car = new Audi();
        }
        if (type.equals("qirui")) {
            car = new QiRui();
        }
        if (type.equals("bwm")) {
            car = new Bwm();
        }
        if (type.equals("benz")) {
            car = new Benz();
        }
        return car;
    }
}
```

虽然把生成汽车的代码抽了出来但是增加或者减少汽车的品牌仍然需要修改这段代码，但与之带来的好处是这个factory可以为多家4s店服务。当以后实现改变时，只要改变这个类就行了。

重组后的4s店是这样的：

```java
public class CarStore {
    private factory;
    
    public CarStore(SimpleCarFactory factory) {
        this.factory = factory;
    }
    
    public Car orderCar(String type) {
        Car car = null;
        car = factory.createCar(type);
        car.execute();
        return Car;
    }
}
```

另外可以利用静态方法定义一个简单的工厂，被称为`静态工厂`。使用静态方法是因为不需要创建对象就可以使用，但是有相应的问题就是不能通过继承来改变创建方法的行为，这是为什么呢，通过继承来改变创建方法的行为在这里就是重写静态方法，`重写指的是根据运行时对象的类型来决定调用哪个方法，而静态方法在编译期就已经与编译出来的类型绑定了`。



## 工厂方法

为了解决上面简单工厂增加或者减少汽车类型需要修改相关代码现在可以使用`工厂方法模式`来解决这个问题，我们先来看一下工厂方法的定义：

```
工厂方法模式 ：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
```

在简单工厂里面现在增加生产江淮的汽车，就需要在createCar(String type)方法里面增加这种类型。现在可以这样解决，定义一个抽象工厂CarFacotry，定义一个抽象的工厂方法，让子类实现此方法制造产品。

```java
public abstract class CarFactory {
    public abstract Car createCar(String type);
}
```

我们可以去实现具体的汽车工厂，比如BMWFactory、BenzFactory等，这样每一个类型的工厂只要只要这个类型的汽车就可以了。

```java
public class BMWFactory extends CarFactory {
    private Car car;
    public Car createCar(String type) {
        if (type.equals("bwm")) {
            car = new Bwm();
        }
        return car;
    }
}
```

```java
public class BenzFactory extends CarFacatory {
    private Car car;
    
    public Car createCar(String type) {
        if (type.equals("benz")) {
            car = new Benz();
        }
        return car;
    }
}
```

在使用中直接把具体的汽车工厂通过CarStore的构造方法传进去就行了，然后orderCar的时候会去执行这个指定工厂的createCar()方法。

下面是工厂方法简单的类图：

![factory method](/img/in-post/post-designPattern/post-designPattern-factoryPattern-1.png)

工厂方法模式能够封装具体类型的实例化。抽象的Creator提供了一个创建对象的方法的接口，称为`“工厂方法”`。在抽象的Creator中，任何其他实现的方法，都可能使用到这个工厂方法所制造出来的产品，但只有子类真正实现这个工厂方法创建产品。

这里每一个具体的工厂的实现都像是SimpleFactory，区别在于这里的具体工厂是扩展自一个类，这个类有一个抽象的方法createCar()。由每个工厂自己来负责createCar()中的行为。另外简单工厂不具有工厂方法的弹性，简单工厂不能变更正在创建的产品，简单工厂添加删除类型需要修改那段代码，而工厂方法不需要。

## 抽象工厂

在认识抽象工厂模式之前，我们先来认识一下`依赖倒置原则`：

```
依赖倒置原则(Dependency Inversion Principle)：要依赖抽象，不要依赖具体类
```

这个原则说明了：不能让高层组件依赖底层组件，不管高层或底层组件，“两者”都应该依赖于抽象。所谓“高层”组件，是由其他底层组件定义其行为的类。比如：在这里CarStore是个高层组件，因为它的行为是由Car定义的。

比如像下面这样就是依赖具体类：

```java
public class DependentCarStore {
    public Car orderCar(String type) {
        Car car = null;

        if (type.equals("audi")) {
            car = new Audi();
        }
        if (type.equals("qirui")) {
            car = new QiRui();
        }
        if (type.equals("bwm")) {
            car = new Bwm();
        }
        if (type.equals("benz")) {
            car = new Benz();
        }

        car.execute();
        return car;
    }
}
```

在DependentCarStore中，DependentCarStore依赖于具体的汽车类，这是违背依赖倒置原则的。如果要符合依赖倒置原则，我们需要做的转变就是定义一个Car接口，由CarStore来依赖于Car，然后具体的汽车类来实现这个接口，所以说也是依赖于Car。

避免在OO设计中违反依赖倒置原则

* 变量不可以持有具体类的引用
* 不要让类派生自具体类
* 不要覆盖基类中已实现的方法

我们来认识一下抽象工厂模式：

```
抽象工厂模式 ： 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。
```

抽象工厂模式是为产品家族提供接口。家族在这里就是发动机、喇叭、车轮等。通过抽象工厂提供的接口，可以创建产品的家族，利用这个接口书写代码，我们的代码将从实际工厂解耦，以便实现不同的工厂，制造出各种不同的产品。奔驰、宝马、江淮汽车的各个零件都是不一样的，在这里我们可以分别的生产不同的零件。

首先我们先来建一个零件工厂：

```java
public interface CarComponentsFatory {
    public Engine createEngine();
    public Tire createTire();
    public Horn createHorn();
}
```

接下来先来实现奔驰零件工厂，Benz用到的零件都是比较好的：

```java
public class BenzCarComponentsFatory {
    public Engine createEngine() {
        return new HighEngine();
    }
    
    public Tire createTire() {
        return new HighTire();
    }
    
    public Horn createHorn() {
        return new HighHorn();
    }
}
```

而江淮的车使用到的零件就比Benz差了，所以使用低档次的零件：

```java
public class JHCarComponentsFactory {
    public Engine createEngine() {
        return new LowEngine();
    }
    
    public Tire createTire() {
        return new LowTire();
    }
    
    public Horn createHorn() {
        return new LowHorn();
    }
}
```

零件工厂已经准备好了，我们重新开始生产汽车，先从抽象的Car类开始：

```java
public abstract class Car {
    String name;
    Engine engine;
    Tire tire;
    Horn horn;
    
    abstract void execute();
    
    void setName(String name) {
        this.name = name;
    }
    
    String getName() {
        return name;
    }
    
    public String toString {
        ......
    }
}
```

现在已经有了一个抽象的汽车类了，现在开始创建奔驰和江淮的汽车了。

```java
public class BenzCar extends Car {
    private CarComponentsFatory carComponentsFactory;
    
    public BenzCar(CarComponentsFactory carComponentsFactory) {
        this.carComponentsFactory = carComponentsFactory;
    }
    
    void execute() {
        engine = carComponentsFactory.createEngine();
        tire = carComponentsFactory.createTire();
        horn = carComponentsFactory.createHorn();
    }
}
```

同样创建江淮汽车也是如此，并且可以在这基础上有自己的修改。

好了，现在我们去4s店购买汽车：

```java
public class BenzCarStore extends CarStore {
    public Car createCar() {
        Car car = null;
        CarComponentsFatory componentsFactory = new BenzCarComponentsFatory();
       
        car = new BenzCar(componentsFactory)；
        car.setName("Benz");
        return car;
    }
}
```

在这里我们创建BenzCar然后让它与Benz零件工厂绑定在一起，之后就可以调用execute()方法让工厂去生产零件。可以看到在这里我们甚至可以使用JH零件工厂来给Benz生产零件，但是呢这肯定会被投诉的。

现在你可以对比一下工厂方法和抽象工厂，其实抽象工厂的每个方法实际上都是使用工厂方法来实现的。比如createEngine()等，每个方法都被声明为抽象，而子类的方法覆盖这些对象来创建某些对象。

但是，工厂方法创建对象用的方法是继承，利用工厂方法创建对象需要扩展一个类，而抽象工厂是通过对象的组合。工厂方法模式和抽象方法模式比较容易搞混，在使用中工厂方法是用来创建一个产品。而抽象工厂是可以被用来创建整个产品家族的。如果使用抽象工厂创建产品，加入新产品就必须改变其接口了。

## 后记

三种工厂模式各有各的用处，简单工厂用于简单的创建一个产品，工厂模式在简单工厂的基础上可以增加产品类型，抽象工厂用于创建整个产品家族的，可以根据具体的情况选择使用对应的工厂模式。这是我目前理解的工厂模式，会有一些理解不准确不到位的地方，希望大家能多多指教。

